#pragma once
#include <functional>
#include "tree.h"
namespace yeet{
	template <typename val, typename cmp = std::less<val>>
	struct node{
		val value;
		node *parent;
		node *left;
		node *right;
		unsigned int height;
	public:
		node();
		node(val value, node *left = nullptr, node *right = nullptr, node *parent = nullptr);
		node(const node &other);
		node(node && other);
		~node();

		// node& operator=(const node &other);
		// node& operator=(node &&other);

		val getvalue();
		node *leftptr();
		node *rightptr();
		node *parentptr();

		void setvalue(val value);
		void setleft(node *left);
		void setright(node *right); 
		void setparent(node *parent);

		void updateheight();

		void leftrot();
		void rightrot();
	};

	// template<typename val, typename cmp = std::less<val>>
	// using tree = node<val, cmp>;
	// template <typename val, typename cmp = std::less<val>>
	// struct tree{
	// 	node<val, cmp> *head;
	// public:
	// 	tree();
	// 	tree(node<val, cmp> nd);
	// 	tree(const tree &other);
	// 	tree(tree &&other);
	// 	~tree();	

	// 	// tree& operator=(const tree &other);
	// 	// tree& operator=(tree &&other);

	// 	void leftrot();
	// 	void rightrot();
	// };
}